[{"/space/Projects/Web/TorrServerWeb/src/index.js":"1","/space/Projects/Web/TorrServerWeb/src/App.js":"2","/space/Projects/Web/TorrServerWeb/src/components/Appbar.js":"3","/space/Projects/Web/TorrServerWeb/src/components/TorrentList.js":"4","/space/Projects/Web/TorrServerWeb/src/components/Add.js":"5","/space/Projects/Web/TorrServerWeb/src/components/Settings.js":"6","/space/Projects/Web/TorrServerWeb/src/components/RemoveAll.js":"7","/space/Projects/Web/TorrServerWeb/src/components/Donate.js":"8","/space/Projects/Web/TorrServerWeb/src/components/Upload.js":"9","/space/Projects/Web/TorrServerWeb/src/utils/Hosts.js":"10","/space/Projects/Web/TorrServerWeb/src/components/Torrent.js":"11","/space/Projects/Web/TorrServerWeb/src/components/DialogTorrentInfo.js":"12","/space/Projects/Web/TorrServerWeb/src/utils/Utils.js":"13"},{"size":224,"mtime":1607107696675,"results":"14","hashOfConfig":"15"},{"size":287,"mtime":1607107696675,"results":"16","hashOfConfig":"15"},{"size":6143,"mtime":1607107696675,"results":"17","hashOfConfig":"15"},{"size":1556,"mtime":1607107696675,"results":"18","hashOfConfig":"15"},{"size":3272,"mtime":1607107696675,"results":"19","hashOfConfig":"15"},{"size":6279,"mtime":1607110557552,"results":"20","hashOfConfig":"15"},{"size":1412,"mtime":1607107696675,"results":"21","hashOfConfig":"15"},{"size":2775,"mtime":1607107696675,"results":"22","hashOfConfig":"15"},{"size":1346,"mtime":1607107696675,"results":"23","hashOfConfig":"15"},{"size":865,"mtime":1607114325985,"results":"24","hashOfConfig":"15"},{"size":6332,"mtime":1607111789331,"results":"25","hashOfConfig":"15"},{"size":5055,"mtime":1607113692027,"results":"26","hashOfConfig":"15"},{"size":214,"mtime":1607107696675,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"326m48",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/space/Projects/Web/TorrServerWeb/src/index.js",[],["58","59"],"/space/Projects/Web/TorrServerWeb/src/App.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Appbar.js",[],"/space/Projects/Web/TorrServerWeb/src/components/TorrentList.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Add.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Settings.js",[],"/space/Projects/Web/TorrServerWeb/src/components/RemoveAll.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Donate.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Upload.js",[],"/space/Projects/Web/TorrServerWeb/src/utils/Hosts.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Torrent.js",["60","61","62"],"import React, { useEffect, useRef } from 'react'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button'\n\nimport 'fontsource-roboto'\n\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Typography from '@material-ui/core/Typography'\nimport ListItem from '@material-ui/core/ListItem'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Dialog from '@material-ui/core/Dialog'\nimport Image from 'material-ui-image'\n\nimport { humanizeSize } from '../utils/Utils'\n\nimport DialogTorrentInfo from './DialogTorrentInfo'\nimport { torrentsHost } from '../utils/Hosts'\n\nconst style = {\n    width100: {\n        width: '100%',\n    },\n}\n\nexport default function Torrent(props) {\n    const [open, setOpen] = React.useState(false)\n    const [torrent, setTorrent] = React.useState(props.torrent)\n    const timerID = useRef(-1)\n\n    useEffect(() => {\n        setTorrent(props.torrent)\n    }, [props.torrent])\n\n    useEffect(() => {\n        if (open)\n            timerID.current = setInterval(() => {\n                getTorrent(torrent.hash, (torr, error) => {\n                    if (error) console.error(error)\n                    else if (torr) setTorrent(torr)\n                })\n            }, 1000)\n        else clearInterval(timerID.current)\n\n        return () => {\n            clearInterval(timerID.current)\n        }\n    }, [torrent.hash, open])\n\n    return (\n        <div>\n            <ListItem>\n                <ButtonGroup style={style.width100} disableElevation variant=\"contained\" color=\"primary\">\n                    <Button\n                        style={style.width100}\n                        onClick={() => {\n                            setOpen(true)\n                        }}\n                    >\n                        <Typography>\n                            {torrent.name ? torrent.name : torrent.title}\n                            {torrent.torrent_size > 0 ? ' | ' + humanizeSize(torrent.torrent_size) : ''}\n                            {torrent.download_speed > 0 ? ' | ' + humanizeSize(torrent.download_speed) + '/sec' : ''}\n                        </Typography>\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            deleteTorrent(torrent)\n                        }}\n                    >\n                        <DeleteIcon />\n                        <Typography>Delete</Typography>\n                    </Button>\n                </ButtonGroup>\n            </ListItem>\n            <Dialog\n                open={open}\n                onClose={() => {\n                    setOpen(false)\n                }}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth={true}\n                maxWidth={'lg'}\n            >\n                <DialogTorrentInfo torrent={torrent} start={open} />\n                <DialogActions>\n                    <Button\n                        onClick={() => {\n                            setOpen(false)\n                        }}\n                        color=\"primary\"\n                    >\n                        OK\n                    </Button>\n                    <Button\n                        color=\"primary\"\n                        aria-label=\"text primary button\"\n                        onClick={() => {\n                            setOpen(false)\n                            dropTorrent(torrent)\n                        }}\n                    >\n                        Drop\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nfunction getTorrent(hash, callback) {\n    try {\n        fetch(torrentsHost, {\n            method: 'post',\n            body: JSON.stringify({ action: 'get', hash: hash }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (json) => {\n                    callback(json, null)\n                },\n                (error) => {\n                    callback(null, error)\n                }\n            )\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nfunction deleteTorrent(torrent) {\n    try {\n        fetch(torrentsHost, {\n            method: 'post',\n            body: JSON.stringify({\n                action: 'rem',\n                hash: torrent.hash,\n            }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nfunction dropTorrent(torrent) {\n    try {\n        fetch(torrentsHost, {\n            method: 'post',\n            body: JSON.stringify({\n                action: 'drop',\n                hash: torrent.hash,\n            }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n    } catch (e) {\n        console.error(e)\n    }\n}\n\n/*\n{\n\t\"title\": \"Mulan 2020\",\n\t\"poster\": \"https://kinohod.ru/o/88/d3/88d3054f-8fd3-4daf-8977-bb4bc8b95206.jpg\",\n\t\"timestamp\": 1606897747,\n\t\"name\": \"Mulan.2020.MVO.BDRip.1.46Gb\",\n\t\"hash\": \"f6c992b437c04d0f5a44b42852bb61de7ce90f9a\",\n\t\"stat\": 2,\n\t\"stat_string\": \"Torrent preload\",\n\t\"loaded_size\": 6160384,\n\t\"torrent_size\": 1569489783,\n\t\"preloaded_bytes\": 5046272,\n\t\"preload_size\": 20971520,\n\t\"download_speed\": 737156.3390754947,\n\t\"total_peers\": 149,\n\t\"pending_peers\": 136,\n\t\"active_peers\": 10,\n\t\"connected_seeders\": 9,\n\t\"half_open_peers\": 15,\n\t\"bytes_written\": 100327,\n\t\"bytes_read\": 8077590,\n\t\"bytes_read_data\": 7831552,\n\t\"bytes_read_useful_data\": 6160384,\n\t\"chunks_read\": 478,\n\t\"chunks_read_useful\": 376,\n\t\"chunks_read_wasted\": 102,\n\t\"pieces_dirtied_good\": 2,\n\t\"file_stats\": [{\n\t\t\"id\": 1,\n\t\t\"path\": \"Mulan.2020.MVO.BDRip.1.46Gb/Mulan.2020.MVO.BDRip.1.46Gb.avi\",\n\t\t\"length\": 1569415168\n\t}, {\n\t\t\"id\": 2,\n\t\t\"path\": \"Mulan.2020.MVO.BDRip.1.46Gb/Mulan.2020.MVO.BDRip.1.46Gb_forced.rus.srt\",\n\t\t\"length\": 765\n\t}, {\n\t\t\"id\": 3,\n\t\t\"path\": \"Mulan.2020.MVO.BDRip.1.46Gb/Mulan.2020.MVO.BDRip.1.46Gb_full.rus.srt\",\n\t\t\"length\": 73850\n\t}]\n}\n */\n","/space/Projects/Web/TorrServerWeb/src/components/DialogTorrentInfo.js",["63","64","65"],"import React, { useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { Button, ButtonGroup, Grid, List, ListItem } from '@material-ui/core'\nimport CachedIcon from '@material-ui/icons/Cached'\n\nimport { humanizeSize } from '../utils/Utils'\nimport { playlistTorrHost, streamHost } from '../utils/Hosts'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Dialog from '@material-ui/core/Dialog'\n\nconst style = {\n    width100: {\n        width: '100%',\n    },\n    width80: {\n        width: '80%',\n    },\n    poster: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n}\n\nexport default function DialogTorrentInfo(props) {\n    const [torrent, setTorrent] = React.useState(props.torrent)\n\n    useEffect(() => {\n        setTorrent(props.torrent)\n    }, [props.torrent])\n\n    return (\n        <div>\n            <DialogTitle id=\"form-dialog-title\">\n                <Grid container spacing={1}>\n                    <Grid item>{torrent.poster && <img height=\"200\" align=\"left\" style={style.poster} src={torrent.poster} />}</Grid>\n                    <Grid style={style.width80} item>\n                        {torrent.title} {torrent.name && torrent.name != torrent.title && ' | ' + torrent.name}\n                        <Typography>\n                            <b>Peers: </b> {getPeer(torrent)}\n                            <br />\n                            <b>Loaded: </b> {getPreload(torrent)}\n                            <br />\n                            <b>Speed: </b> {humanizeSize(torrent.download_speed)}\n                            <br />\n                            <b>Status: </b> {torrent.stat_string}\n                            <br />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    <ListItem>\n                        <ButtonGroup style={style.width100} variant=\"contained\" aria-label=\"contained primary button group\">\n                            <Button\n                                style={style.width100}\n                                onClick={() => window.open(playlistTorrHost + '/' + encodeURI(torrent.name || torrent.title || 'file') + '.m3u?link=' + torrent.hash + '&m3u', '_blank')}\n                            >\n                                Playlist\n                            </Button>\n                            <Button\n                                style={style.width100}\n                                onClick={() => window.open(playlistTorrHost + '/' + encodeURI(torrent.name || torrent.title || 'file') + '.m3u?link=' + torrent.hash + '&m3u&fromlast', '_blank')}\n                            >\n                                Playlist after last view\n                            </Button>\n                        </ButtonGroup>\n                    </ListItem>\n                    {torrent.file_stats &&\n                        torrent.file_stats.map((file) => (\n                            <ButtonGroup style={style.width100} disableElevation variant=\"contained\" color=\"primary\">\n                                <Button\n                                    style={style.width100}\n                                    href={streamHost + '/' + encodeURI(file.path.split('\\\\').pop().split('/').pop()) + '?link=' + torrent.hash + '&index=' + file.id + '&play'}\n                                    // onClick={() => window.open(streamHost + '/' + encodeURI(file.path.split('\\\\').pop().split('/').pop()) + '?link=' + torrent.hash + '&index=' + file.id + '&play', '_blank')}\n                                >\n                                    <Typography>\n                                        {file.path.split('\\\\').pop().split('/').pop()} | {humanizeSize(file.length)}\n                                    </Typography>\n                                </Button>\n                                <Button onClick={() => fetch(streamHost + '?link=' + torrent.hash + '&index=' + file.id + '&preload')}>\n                                    <CachedIcon />\n                                    <Typography>Preload</Typography>\n                                </Button>\n                            </ButtonGroup>\n                        ))}\n                </List>\n            </DialogContent>\n        </div>\n    )\n}\n\nfunction getPreload(torrent) {\n    if (torrent.preloaded_bytes > 0 && torrent.preload_size > 0 && torrent.preloaded_bytes < torrent.preload_size) {\n        let progress = ((torrent.preloaded_bytes * 100) / torrent.preload_size).toFixed(2)\n        return humanizeSize(torrent.preloaded_bytes) + ' / ' + humanizeSize(torrent.preload_size) + '   ' + progress + '%'\n    }\n\n    if (!torrent.preloaded_bytes) return humanizeSize(0)\n\n    return humanizeSize(torrent.preloaded_bytes)\n}\n\nfunction getPeer(torrent) {\n    if (!torrent.connected_seeders) return '[0] 0 / 0'\n    return '[' + torrent.connected_seeders + '] ' + torrent.active_peers + ' / ' + torrent.total_peers\n}\n","/space/Projects/Web/TorrServerWeb/src/utils/Utils.js",[],["66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":10,"column":8,"nodeType":"74","messageId":"75","endLine":10,"endColumn":19},{"ruleId":"72","severity":1,"message":"76","line":11,"column":8,"nodeType":"74","messageId":"75","endLine":11,"endColumn":21},{"ruleId":"72","severity":1,"message":"77","line":14,"column":8,"nodeType":"74","messageId":"75","endLine":14,"endColumn":13},{"ruleId":"72","severity":1,"message":"78","line":10,"column":8,"nodeType":"74","messageId":"75","endLine":10,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":36,"column":51,"nodeType":"81","endLine":36,"endColumn":126},{"ruleId":"82","severity":1,"message":"83","line":38,"column":71,"nodeType":"84","messageId":"85","endLine":38,"endColumn":73},{"ruleId":"68","replacedBy":"86"},{"ruleId":"70","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'DialogTitle' is defined but never used.","Identifier","unusedVar","'DialogContent' is defined but never used.","'Image' is defined but never used.","'Dialog' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["88"],["89"],"no-global-assign","no-unsafe-negation"]