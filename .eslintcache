[{"/space/Projects/Web/TorrServerWeb/src/index.js":"1","/space/Projects/Web/TorrServerWeb/src/App.js":"2","/space/Projects/Web/TorrServerWeb/src/components/Appbar.js":"3","/space/Projects/Web/TorrServerWeb/src/components/TorrentList.js":"4","/space/Projects/Web/TorrServerWeb/src/components/Add.js":"5","/space/Projects/Web/TorrServerWeb/src/components/Settings.js":"6","/space/Projects/Web/TorrServerWeb/src/components/RemoveAll.js":"7","/space/Projects/Web/TorrServerWeb/src/components/Donate.js":"8","/space/Projects/Web/TorrServerWeb/src/components/Upload.js":"9","/space/Projects/Web/TorrServerWeb/src/utils/Hosts.js":"10","/space/Projects/Web/TorrServerWeb/src/components/Torrent.js":"11","/space/Projects/Web/TorrServerWeb/src/components/DialogTorrentInfo.js":"12","/space/Projects/Web/TorrServerWeb/src/utils/Utils.js":"13","/space/Projects/Web/TorrServerWeb/src/components/DialogCacheInfo.js":"14"},{"size":224,"mtime":1607107696675,"results":"15","hashOfConfig":"16"},{"size":840,"mtime":1607359553793,"results":"17","hashOfConfig":"16"},{"size":6484,"mtime":1607359553793,"results":"18","hashOfConfig":"16"},{"size":1568,"mtime":1607359553797,"results":"19","hashOfConfig":"16"},{"size":3345,"mtime":1607359553793,"results":"20","hashOfConfig":"16"},{"size":7781,"mtime":1607448330227,"results":"21","hashOfConfig":"16"},{"size":1416,"mtime":1607359553797,"results":"22","hashOfConfig":"16"},{"size":2793,"mtime":1607359553797,"results":"23","hashOfConfig":"16"},{"size":1348,"mtime":1607359553797,"results":"24","hashOfConfig":"16"},{"size":737,"mtime":1607369566046,"results":"25","hashOfConfig":"16"},{"size":6804,"mtime":1607360517591,"results":"26","hashOfConfig":"16"},{"size":4662,"mtime":1607446111814,"results":"27","hashOfConfig":"16"},{"size":428,"mtime":1607446112014,"results":"28","hashOfConfig":"16"},{"size":3889,"mtime":1607452470336,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"326m48",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},"/space/Projects/Web/TorrServerWeb/src/index.js",[],["61","62"],"/space/Projects/Web/TorrServerWeb/src/App.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Appbar.js",[],"/space/Projects/Web/TorrServerWeb/src/components/TorrentList.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Add.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Settings.js",["63","64","65","66","67"],"import ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport React, { useEffect } from 'react'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport TextField from '@material-ui/core/TextField'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport { FormControlLabel, InputLabel, MenuItem, NativeSelect, Select, Switch } from '@material-ui/core'\nimport { settingsHost, setTorrServerHost, torrserverHost } from '../utils/Hosts'\n\nexport default function SettingsDialog() {\n    const [open, setOpen] = React.useState(false)\n    const [settings, setSets] = React.useState({})\n    const [tsHost, setTSHost] = React.useState(torrserverHost ? torrserverHost : window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : ''))\n\n    const handleClickOpen = () => {\n        setOpen(true)\n    }\n    const handleClose = () => {\n        setOpen(false)\n    }\n    const handleCloseSave = () => {\n        setOpen(false)\n        let sets = settings\n        sets.CacheSize *= 1024 * 1024\n        sets.PreloadBufferSize *= 1024 * 1024\n        fetch(settingsHost(), {\n            method: 'post',\n            body: JSON.stringify({ action: 'set', sets: sets }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n    }\n\n    useEffect(() => {\n        fetch(settingsHost(), {\n            method: 'post',\n            body: JSON.stringify({ action: 'get' }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (json) => {\n                    json.CacheSize /= 1024 * 1024\n                    json.PreloadBufferSize /= 1024 * 1024\n                    setSets(json)\n                },\n                (error) => {\n                    console.log(error)\n                }\n            )\n    }, [tsHost])\n\n    const onInputHost = (event) => {\n        let host = event.target.value\n        setTorrServerHost(host)\n        setTSHost(host)\n    }\n\n    const inputForm = (event) => {\n        let sets = JSON.parse(JSON.stringify(settings))\n        if (event.target.type === 'number' || event.target.type === 'select-one') {\n            sets[event.target.id] = Number(event.target.value)\n        } else if (event.target.type === 'checkbox') {\n            sets[event.target.id] = Boolean(event.target.checked)\n        }\n        setSets(sets)\n    }\n\n    return (\n        <div>\n            <ListItem button key=\"Settings\" onClick={handleClickOpen}>\n                <ListItemIcon>\n                    <SettingsIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Settings\" />\n            </ListItem>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth={true}>\n                <DialogTitle id=\"form-dialog-title\">Settings</DialogTitle>\n                <DialogContent>\n                    <TextField onChange={onInputHost} margin=\"dense\" id=\"TorrServerHost\" label=\"Host\" value={tsHost} type=\"url\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"CacheSize\" label=\"Cache size\" value={settings.CacheSize} type=\"number\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"PreloadBufferSize\" label=\"Preload size\" value={settings.PreloadBufferSize} type=\"number\" fullWidth />\n                    <h1 />\n                    <InputLabel htmlFor=\"RetrackersMode\">Retracker mode</InputLabel>\n                    <Select onChange={inputForm} type=\"number\" native=\"true\" id=\"RetrackersMode\" value={settings.RetrackersMode}>\n                        <option value={0}>Don't add retrackers</option>\n                        <option value={1}>Add retrackers</option>\n                        <option value={2}>Remove retrackers</option>\n                        <option value={3}>Replace retrackers</option>\n                    </Select>\n                    <h1 />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"TorrentDisconnectTimeout\" label=\"Torrent disconnect timeout\" value={settings.TorrentDisconnectTimeout} type=\"text\" fullWidth />\n                    <FormControlLabel control={<Switch checked={settings.EnableIPv6} onChange={inputForm} id=\"EnableIPv6\" color=\"primary\" />} label=\"Enable IPv6\" />\n                    <FormControlLabel control={<Switch checked={settings.DisableTCP} onChange={inputForm} id=\"DisableTCP\" color=\"primary\" />} label=\"Disable TCP\" />\n                    <FormControlLabel control={<Switch checked={settings.DisableUTP} onChange={inputForm} id=\"DisableUTP\" color=\"primary\" />} label=\"Disable UTP\" />\n                    <FormControlLabel control={<Switch checked={settings.DisableUPNP} onChange={inputForm} id=\"DisableUPNP\" color=\"primary\" />} label=\"Disable UPNP\" />\n                    <FormControlLabel control={<Switch checked={settings.DisableDHT} onChange={inputForm} id=\"DisableDHT\" color=\"primary\" />} label=\"Disable DHT\" />\n                    <FormControlLabel control={<Switch checked={settings.DisableUpload} onChange={inputForm} id=\"DisableUpload\" color=\"primary\" />} label=\"Disable upload\" />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"DownloadRateLimit\" label=\"Download rate limit\" value={settings.DownloadRateLimit} type=\"number\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"UploadRateLimit\" label=\"Upload rate limit\" value={settings.UploadRateLimit} type=\"number\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"ConnectionsLimit\" label=\"Connections limit\" value={settings.ConnectionsLimit} type=\"number\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"DhtConnectionLimit\" label=\"Dht connection limit\" value={settings.DhtConnectionLimit} type=\"number\" fullWidth />\n                    <TextField onChange={inputForm} margin=\"dense\" id=\"PeersListenPort\" label=\"Peers listen port\" value={settings.PeersListenPort} type=\"number\" fullWidth />\n                    <h1 />\n                    <InputLabel id=\"Strategy\">Strategy</InputLabel>\n                    <Select onChange={inputForm} type=\"number\" native=\"true\" id=\"Strategy\" value={settings.Strategy}>\n                        <option value={0}>DuplicateRequestTimeout</option>\n                        <option value={1}>Fuzzing</option>\n                        <option value={2}>Fastest</option>\n                    </Select>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" variant=\"outlined\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleCloseSave} color=\"primary\" variant=\"outlined\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\n/*\n{\n\t\"CacheSize\": 209715200,\n\t\"PreloadBufferSize\": 20971520,\n\t\"RetrackersMode\": 1,\n\t\"TorrentDisconnectTimeout\": 30,\n\t\"EnableIPv6\": false,\n\t\"DisableTCP\": false,\n\t\"DisableUTP\": true,\n\t\"DisableUPNP\": false,\n\t\"DisableDHT\": false,\n\t\"DisableUpload\": false,\n\t\"DownloadRateLimit\": 0,\n\t\"UploadRateLimit\": 0,\n\t\"ConnectionsLimit\": 20,\n\t\"DhtConnectionLimit\": 500,\n\t\"PeersListenPort\": 0\n}\n */\n","/space/Projects/Web/TorrServerWeb/src/components/RemoveAll.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Donate.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Upload.js",[],"/space/Projects/Web/TorrServerWeb/src/utils/Hosts.js",[],"/space/Projects/Web/TorrServerWeb/src/components/Torrent.js",[],"/space/Projects/Web/TorrServerWeb/src/components/DialogTorrentInfo.js",[],"/space/Projects/Web/TorrServerWeb/src/utils/Utils.js",[],"/space/Projects/Web/TorrServerWeb/src/components/DialogCacheInfo.js",["68"],"import React, { useEffect, useRef } from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nimport { getPeerString, humanizeSize } from '../utils/Utils'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { cacheHost } from '../utils/Hosts'\n\nexport default function DialogCacheInfo(props) {\n    const [hash, setHash] = React.useState(props.hash)\n    const [cache, setCache] = React.useState({})\n    const timerID = useRef(-1)\n\n    useEffect(() => {\n        if (hash)\n            timerID.current = setInterval(() => {\n                getCache(hash, (cache) => {\n                    setCache(cache)\n                })\n            }, 1000)\n        else clearInterval(timerID.current)\n\n        return () => {\n            clearInterval(timerID.current)\n        }\n    }, [hash])\n\n    return (\n        <div>\n            <DialogTitle id=\"form-dialog-title\">\n                <Typography fullWidth>\n                    <b>Hash </b> {cache.Hash}\n                    <br />\n                    <b>Capacity </b> {humanizeSize(cache.Capacity)}\n                    <br />\n                    <b>Filled </b> {humanizeSize(cache.Filled)}\n                    <br />\n                    <b>Torrent size </b> {cache.Torrent && cache.Torrent.torrent_size && humanizeSize(cache.Torrent.torrent_size)}\n                    <br />\n                    <b>Pieces length </b> {humanizeSize(cache.PiecesLength)}\n                    <br />\n                    <b>Pieces count </b> {cache.PiecesCount}\n                    <br />\n                    <b>Peers: </b> {getPeerString(cache.Torrent)}\n                    <br />\n                    <b>Download speed </b> {cache.Torrent && cache.Torrent.download_speed ? humanizeSize(cache.Torrent.download_speed) + '/sec' : ''}\n                    <br />\n                    <b>Status </b> {cache.Torrent && cache.Torrent.stat_string && cache.Torrent.stat_string}\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <div className=\"cache\" dangerouslySetInnerHTML={{ __html: getCacheMap(cache) }} />\n            </DialogContent>\n        </div>\n    )\n}\n\nfunction getCacheMap(cache) {\n    if (!cache || !cache.PiecesCount) return ''\n    var html = ''\n    for (let i = 0; i < cache.PiecesCount; i++) {\n        html += \"<span class='piece\"\n        if (cache.Pieces && cache.Pieces[i]) {\n            let piece = cache.Pieces[i]\n            if (piece.ReaderType === 0) {\n                if (piece.Completed && piece.Size >= piece.Length) html += ' piece-complete'\n                else html += ' piece-loading'\n            } else {\n                if (piece.ReaderType === 1) html += ' piece-player'\n                else if (piece.ReaderType === 2) html += ' piece-buffering'\n            }\n        }\n        html += \"' title='\" + i + \"'></span>\"\n    }\n    return html\n}\n\nfunction getCache(hash, callback) {\n    try {\n        fetch(cacheHost(), {\n            method: 'post',\n            body: JSON.stringify({ action: 'get', hash: hash }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (json) => {\n                    callback(json)\n                },\n                (error) => {\n                    callback({})\n                    console.error(error)\n                }\n            )\n    } catch (e) {\n        console.error(e)\n        callback({})\n    }\n}\n/*\n{\n\t\"Hash\": \"41e36c8de915d80db83fc134bee4e7e2d292657e\",\n\t\"Capacity\": 209715200,\n\t\"Filled\": 2914808,\n\t\"PiecesLength\": 4194304,\n\t\"PiecesCount\": 2065,\n\t\"DownloadSpeed\": 32770.860273455524,\n\t\"Pieces\": {\n\t\t\"2064\": {\n\t\t\t\"Id\": 2064,\n\t\t\t\"Length\": 2914808,\n\t\t\t\"Size\": 162296,\n\t\t\t\"Completed\": false\n\t\t}\n\t}\n}\n */\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":12,"column":40,"nodeType":"75","messageId":"76","endLine":12,"endColumn":48},{"ruleId":"73","severity":1,"message":"77","line":12,"column":50,"nodeType":"75","messageId":"76","endLine":12,"endColumn":62},{"ruleId":"78","severity":1,"message":"79","line":93,"column":21,"nodeType":"80","endLine":93,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":101,"column":21,"nodeType":"80","endLine":101,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":114,"column":21,"nodeType":"80","endLine":114,"endColumn":27},{"ruleId":"73","severity":1,"message":"81","line":10,"column":18,"nodeType":"75","messageId":"76","endLine":10,"endColumn":25},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'NativeSelect' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'setHash' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]